{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Italic;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 TimesNewRomanPSMT;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red11\green76\blue180;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c1961\c38824\c75686;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\i\fs64 \cf2 \expnd0\expndtw0\kerning0
The coloration of black and white images using Convolutional Neural Network 
\f1\i0\fs24 \
\
\pard\pardeftab720\partightenfactor0
\cf2 {{\NeXTGraphic page1image25316736.png \width1204 \height30 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2  \
\pard\pardeftab720\sa240\partightenfactor0

\f2\b\fs64 \cf2 Convolutional Neural Network 
\fs42\fsmilli21333 Dataset 
\f1\b0\fs24 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 The \'93CIFAR-10\'94 (\cf3 https://www.kaggle.com/c/cifar-10/data\cf2 ) data set is used. Data set consists of 50000 images out of which 1000 are used for ease of computation. Images are 3D in the form of Length X Breadth X Channel, where channel represents the RGB colors. 
\f1\fs24 \

\f3\fs29\fsmilli14667 The colored images and their grayscale are input for training. Model is tested on the gray counterpart. Error is evaluated based on the difference of original and colorized images matrices. 
\f1\fs24 \
\pard\pardeftab720\sa240\partightenfactor0

\f2\b\fs42\fsmilli21333 \cf2 How to Compile 
\f1\b0\fs24 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 The project is carried out in Python. So, it is necessary that python 3.x is installed. Follow the following steps to run the project: 
\f1\fs24 \
\pard\pardeftab720\sa240\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95 
\f3 Download the folder and using the terminal/command prompt, navigate to the project directory For example: 
\f4\fs26\fsmilli13333 cd Desktop/project 
\f1\fs24 \

\fs29\fsmilli14667 \'95 
\f3 Once you are in the folder, execute the following command: 
\f4\fs26\fsmilli13333 python run.py 
\f1\fs24 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs26\fsmilli13333 \cf2 This should successfully run the code with output displayed like: 
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 {{\NeXTGraphic page2image25306496.png \width880 \height33 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2  {{\NeXTGraphic page2image25307456.png \width2434 \height13 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} {{\NeXTGraphic page2image25307648.png \width1893 \height33 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} {{\NeXTGraphic page2image23316304.png \width5400 \height2101 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} {{\NeXTGraphic page2image23326704.png \width7070 \height2534 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs26\fsmilli13333 \cf2 NOTE: 
\f1\fs24 \

\f3\fs26\fsmilli13333 Since the training of model takes considerable amount of time, model is trained and the optimized parameters are dumped in \'91cnn.pkl\'92 file. Hence, the training part is commented out in the \'91run.py\'92 file and optimized parameters are directly loaded from the \'91cnn.pkl\'92 pickle file. 
\f1\fs24 \

\f3\fs26\fsmilli13333 Creating object of \'91Network\'92 class and training the model: 
\f1\fs24 \

\f3\fs26\fsmilli13333 While training: 
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 {{\NeXTGraphic page3image23397808.png \width8261 \height3767 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2  {{\NeXTGraphic page3image23399264.png \width6378 \height5118 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬} \
}